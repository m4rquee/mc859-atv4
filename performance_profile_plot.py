# -*- coding: utf-8 -*-
"""performance profile plot

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a51oV5KcCeL1YsSb-EfrQGLjoFCgVd_D
"""

import numpy as np


data = {}
data['grasp_r'] = np.array([0.99, 0.97, 0.93])
data['grasp_s'] = np.array([0.98, 0.93, 0.90])
data['ts_p'] = np.array([1.00, 1.00, 0.97])
data['ts_r'] = np.array([1.00, 0.98, 0.92])
data['ga_d'] = np.array([1.00, 0.98, 0.99])
data['ga_a'] = np.array([0.97, 0.99, 1.00])

def ro(s, X):
  s_data = data[s]
  bounds = 1 - X
  cum_sum = []
  for bound in bounds:
    cum_sum.append(sum(s_data >= bound))
  return np.array(cum_sum) / len(s_data)


# 100 linearly spaced numbers:
x = np.linspace(0, 0.2, 2100)

import matplotlib.pyplot as plt


# setting the axes at the centre:
fig = plt.figure(figsize=(10, 10))
ax = fig.add_subplot(1, 1, 1)

# plot the performance profile:
plt.xlabel('τ')
plt.ylabel('P(r_ps ≥ 1-τ : 1 ≤ s ≤ n_s)')
plt.plot(x, ro('grasp_r', x), 'b--', label='GRASP-reactive')
plt.plot(x, ro('grasp_s', x), 'c--', label='GRASP-sampled')
plt.plot(x, ro('ts_p', x), 'r--', label='TS-probabilistic')
plt.plot(x, ro('ts_r', x), 'm--', label='TS-restart')
plt.plot(x, ro('ga_d', x), 'g--', label='GA-default')
plt.plot(x, ro('ga_a', x), 'y--', label='GA-adaptative')
plt.legend(loc='lower right');